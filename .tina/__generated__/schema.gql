# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  basename: String!
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  sys: SystemInfo
  id: ID!
  form: JSON!
  values: JSON!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Int!
}

type Query {
  getCollection(collection: String): Collection!
  getCollections: [Collection!]!
  node(id: String): Node!
  getDocument(collection: String, relativePath: String): DocumentNode!
  getDocumentList(before: String, after: String, first: Int, last: Int): DocumentConnection!
  getDocumentFields: JSON!
  getSeoDocument(relativePath: String): SeoDocument!
  getSeoList(before: String, after: String, first: Int, last: Int): SeoConnection!
  getNavbarDocument(relativePath: String): NavbarDocument!
  getNavbarList(before: String, after: String, first: Int, last: Int): NavbarConnection!
  getFooterDocument(relativePath: String): FooterDocument!
  getFooterList(before: String, after: String, first: Int, last: Int): FooterConnection!
  getHomePageDocument(relativePath: String): HomePageDocument!
  getHomePageList(before: String, after: String, first: Int, last: Int): HomePageConnection!
  getTestPageDocument(relativePath: String): TestPageDocument!
  getTestPageList(before: String, after: String, first: Int, last: Int): TestPageConnection!
}

type DocumentConnectionEdges {
  cursor: String
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo
  totalCount: Int!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String!
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Int, last: Int): DocumentConnection!
}

union DocumentNode = SeoDocument | NavbarDocument | FooterDocument | HomePageDocument | TestPageDocument

type Seo {
  title: String
  description: String
}

type SeoDocument implements Node & Document {
  id: ID!
  sys: SystemInfo!
  data: Seo!
  form: JSON!
  values: JSON!
  dataJSON: JSON!
}

type SeoConnectionEdges {
  cursor: String
  node: SeoDocument
}

type SeoConnection implements Connection {
  pageInfo: PageInfo
  totalCount: Int!
  edges: [SeoConnectionEdges]
}

type NavbarLinks {
  label: String
  url: String
}

type Navbar {
  logo: String
  links: [NavbarLinks]
  fixed: Boolean
  layout: String
}

type NavbarDocument implements Node & Document {
  id: ID!
  sys: SystemInfo!
  data: Navbar!
  form: JSON!
  values: JSON!
  dataJSON: JSON!
}

type NavbarConnectionEdges {
  cursor: String
  node: NavbarDocument
}

type NavbarConnection implements Connection {
  pageInfo: PageInfo
  totalCount: Int!
  edges: [NavbarConnectionEdges]
}

type FooterNavigationRowLinks {
  label: String
  url: String
}

type FooterNavigationRow {
  title: String
  links: [FooterNavigationRowLinks]
}

type Footer {
  navigationRow: [FooterNavigationRow]
}

type FooterDocument implements Node & Document {
  id: ID!
  sys: SystemInfo!
  data: Footer!
  form: JSON!
  values: JSON!
  dataJSON: JSON!
}

type FooterConnectionEdges {
  cursor: String
  node: FooterDocument
}

type FooterConnection implements Connection {
  pageInfo: PageInfo
  totalCount: Int!
  edges: [FooterConnectionEdges]
}

type HomePageSectionsCarouselButton {
  text: String
  url: String
}

type HomePageSectionsCarousel {
  images: [String]
  mainText: String
  description: String
  button: HomePageSectionsCarouselButton
  delay: Int
}

type HomePageSectionsTrustIconsBadges {
  icon: String
  text: String
}

type HomePageSectionsTrustIcons {
  badges: [HomePageSectionsTrustIconsBadges]
}

type HomePageSectionsSingleCollectionPreview {
  collection: String
  numImages: Int
}

type HomePageSectionsMultipleCollectionsPreview {
  titleText: String
  collections: [String]
}

type HomePageSectionsSocialMediaIntegration {
  socialMedia: String
  numImages: Int
}

type HomePageSectionsTestimonialsUserTestimonials {
  quote: String
  user: String
  website: String
  date: String
}

type HomePageSectionsTestimonials {
  titleText: String
  userTestimonials: [HomePageSectionsTestimonialsUserTestimonials]
}

type HomePageSectionsAlternatingImageBlocksImageBlocks {
  image: String
  titleText: String
  paragraphs: [String]
}

type HomePageSectionsAlternatingImageBlocks {
  imageBlocks: [HomePageSectionsAlternatingImageBlocksImageBlocks]
}

union HomePageSections = HomePageSectionsCarousel | HomePageSectionsTrustIcons | HomePageSectionsSingleCollectionPreview | HomePageSectionsMultipleCollectionsPreview | HomePageSectionsSocialMediaIntegration | HomePageSectionsTestimonials | HomePageSectionsAlternatingImageBlocks

type HomePage {
  sections: [HomePageSections]
}

type HomePageDocument implements Node & Document {
  id: ID!
  sys: SystemInfo!
  data: HomePage!
  form: JSON!
  values: JSON!
  dataJSON: JSON!
}

type HomePageConnectionEdges {
  cursor: String
  node: HomePageDocument
}

type HomePageConnection implements Connection {
  pageInfo: PageInfo
  totalCount: Int!
  edges: [HomePageConnectionEdges]
}

type TestPage {
  title: String
  author: String
  body: String
}

type TestPageDocument implements Node & Document {
  id: ID!
  sys: SystemInfo!
  data: TestPage!
  form: JSON!
  values: JSON!
  dataJSON: JSON!
}

type TestPageConnectionEdges {
  cursor: String
  node: TestPageDocument
}

type TestPageConnection implements Connection {
  pageInfo: PageInfo
  totalCount: Int!
  edges: [TestPageConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  createDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  updateSeoDocument(relativePath: String!, params: SeoMutation!): SeoDocument!
  createSeoDocument(relativePath: String!, params: SeoMutation!): SeoDocument!
  updateNavbarDocument(relativePath: String!, params: NavbarMutation!): NavbarDocument!
  createNavbarDocument(relativePath: String!, params: NavbarMutation!): NavbarDocument!
  updateFooterDocument(relativePath: String!, params: FooterMutation!): FooterDocument!
  createFooterDocument(relativePath: String!, params: FooterMutation!): FooterDocument!
  updateHomePageDocument(relativePath: String!, params: HomePageMutation!): HomePageDocument!
  createHomePageDocument(relativePath: String!, params: HomePageMutation!): HomePageDocument!
  updateTestPageDocument(relativePath: String!, params: TestPageMutation!): TestPageDocument!
  createTestPageDocument(relativePath: String!, params: TestPageMutation!): TestPageDocument!
}

input DocumentMutation {
  seo: SeoMutation
  navbar: NavbarMutation
  footer: FooterMutation
  homePage: HomePageMutation
  testPage: TestPageMutation
}

input SeoMutation {
  title: String
  description: String
}

input NavbarLinksMutation {
  label: String
  url: String
}

input NavbarMutation {
  logo: String
  links: [NavbarLinksMutation]
  fixed: Boolean
  layout: String
}

input FooterNavigationRowLinksMutation {
  label: String
  url: String
}

input FooterNavigationRowMutation {
  title: String
  links: [FooterNavigationRowLinksMutation]
}

input FooterMutation {
  navigationRow: [FooterNavigationRowMutation]
}

input HomePageSectionsCarouselButtonMutation {
  text: String
  url: String
}

input HomePageSectionsCarouselMutation {
  images: [String]
  mainText: String
  description: String
  button: HomePageSectionsCarouselButtonMutation
  delay: Int
}

input HomePageSectionsTrustIconsBadgesMutation {
  icon: String
  text: String
}

input HomePageSectionsTrustIconsMutation {
  badges: [HomePageSectionsTrustIconsBadgesMutation]
}

input HomePageSectionsSingleCollectionPreviewMutation {
  collection: String
  numImages: Int
}

input HomePageSectionsMultipleCollectionsPreviewMutation {
  titleText: String
  collections: [String]
}

input HomePageSectionsSocialMediaIntegrationMutation {
  socialMedia: String
  numImages: Int
}

input HomePageSectionsTestimonialsUserTestimonialsMutation {
  quote: String
  user: String
  website: String
  date: String
}

input HomePageSectionsTestimonialsMutation {
  titleText: String
  userTestimonials: [HomePageSectionsTestimonialsUserTestimonialsMutation]
}

input HomePageSectionsAlternatingImageBlocksImageBlocksMutation {
  image: String
  titleText: String
  paragraphs: [String]
}

input HomePageSectionsAlternatingImageBlocksMutation {
  imageBlocks: [HomePageSectionsAlternatingImageBlocksImageBlocksMutation]
}

input HomePageSectionsMutation {
  carousel: HomePageSectionsCarouselMutation
  trustIcons: HomePageSectionsTrustIconsMutation
  singleCollectionPreview: HomePageSectionsSingleCollectionPreviewMutation
  multipleCollectionsPreview: HomePageSectionsMultipleCollectionsPreviewMutation
  socialMediaIntegration: HomePageSectionsSocialMediaIntegrationMutation
  testimonials: HomePageSectionsTestimonialsMutation
  alternatingImageBlocks: HomePageSectionsAlternatingImageBlocksMutation
}

input HomePageMutation {
  sections: [HomePageSectionsMutation]
}

input TestPageMutation {
  title: String
  author: String
  body: String
}

schema {
  query: Query
  mutation: Mutation
}
  